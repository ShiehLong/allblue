<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!--security="none"时,对应 pattern 的 filter 链为空,不会进入过滤器-->
    <http security="none" pattern="/fonts/**"/>
    <http security="none" pattern="/jsp/common/**"/>
    <http security="none" pattern="/css/**"/>
    <http security="none" pattern="/img/**"/>
    <http security="none" pattern="/js/**"/>
    <http security="none" pattern="/index.jsp"/>

    <http use-expressions='true'
          entry-point-ref="myAuthenticationEntryPoint"
          access-denied-page="/jsp/common/access.jsp">
        <form-login login-page="/jsp/common/login.jsp"
                    login-processing-url="/j_spring_security_check"
                    username-parameter="username"
                    password-parameter="password"
                    authentication-failure-url="/jsp/common/access.jsp"
                    default-target-url="/index.jsp"/>
        <session-management invalid-session-url="/jsp/common/login.jsp">
            <concurrency-control max-sessions="1"
                                 error-if-maximum-exceeded="false"/>
        </session-management>
        <!-- 定义记住我功能，通过 user-service-ref 指定将要使用的 UserDetailsService-->
        <remember-me key="elim" user-service-ref="blueUserDetailsService"
                     data-source-ref="dataSource"/>
        <!-- 退出登录时删除 session 对应的 cookie -->
        <logout delete-cookies="JSESSIONID"
                invalidate-session="true"
                logout-success-url="/jsp/common/login.jsp"/>
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    </http>

    <!-- 未登录的切入点 --><!-- 需要有个切入点 -->
    <beans:bean id="myAuthenticationEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/jsp/common/login.jsp"/>
    </beans:bean>

    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="myFilter"
                class="com.allblue.security.BlueFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
        <beans:property name="securityMetadataSource" ref="securityMetadataSource"/>
    </beans:bean>
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="blueUserDetailsService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
            <password-encoder ref="bCryptEncoder"/>
        </authentication-provider>
    </authentication-manager>
    <!--在这个类中，你就可以从数据库中读取用户的密码，角色信息，状态，账号是否过期等 -->
    <beans:bean id="blueUserDetailsService"
                class="com.allblue.security.BlueUserDetailsService"/>

    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="myAccessDecisionManagerBean"
                class="com.allblue.security.BlueAccessDecisionManager"/>
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="securityMetadataSource"
                class="com.allblue.security.BlueInvocationSecurityMetadataSource"/>

    <beans:bean id="bCryptEncoder"
                class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans:beans>